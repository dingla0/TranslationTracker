Please build an MVP (Minimum Viable Product) for a Translation Management System (TMS). The primary goal of the MVP is to support a manual translation workflow from Korean to English.

Core MVP Features
User Authentication & Roles:

Implement user registration and login.
Support three basic user roles: Admin (manages users and glossary terms), Korean Transcriber (uploads Korean source content), and English Translator (translates Korean content to English). The "Regional Translator" role is out of scope for MVP.
Content Intake & Management:

Allow Korean Transcribers to upload Korean source documents (e.g., .txt files, representing forum content).
The system should manage basic structured metadata for these documents, such as a title or identifier, upload date, and topic if simple to implement.
Display a list of uploaded documents with their basic metadata and current translation status.
Translation Workspace:

Develop a side-by-side bilingual editor displaying Korean source text and an input area for English target text.
The editor should allow English Translators to input and save their translations, ideally on a segment-by-segment basis (e.g., sentence by sentence).
Implement a mechanism for saving translation progress (e.g., explicit save button per segment or document, or auto-save). This is inspired by "real-time editing and commenting functionalities" but simplified for MVP.
Translation Memory (TM) - Basic Implementation:

When an English translation for a Korean segment is saved and marked as finalized by the translator, store this pair (Korean source segment, English target segment) in a Translation Memory database.
When an English Translator moves to a new Korean segment in the editor, if an exact match for that Korean segment exists in the TM, automatically suggest the stored English translation to the translator.
Glossary / Terminology - Basic Implementation:

Allow Admins to create and manage a simple glossary containing Korean terms and their approved English translations.
During translation, if a Korean term from the glossary appears in the current source segment being translated, display its English translation and definition (if provided in the glossary) to the translator as a readily accessible reference.
Workflow & Status Tracking:

Implement a basic status system for translation tasks/documents. For MVP, this could include statuses like: "Pending Translation," "In Progress," "Translated".
Provide a simple pipeline dashboard where users (especially Admins and Translators) can view the list of documents and their current translation status.
Export:

Allow users to export the completed English translation of a document as a basic .txt file or a .docx file.
(Optional MVP Feature - If Feasible)
Machine Translation Suggestion:
Integrate with the Azure Translator API.
In the translation editor, provide an option for the English Translator to fetch a machine translation suggestion from Azure Translator for the current Korean segment. This suggestion should be clearly marked as machine-generated and is for assistance, not direct auto-translation of content.
Suggested Technology Stack
(These are guidelines based on the source document; feel free to adapt for MVP feasibility and Replit environment compatibility)

Frontend: React + TypeScript
Backend: Node.js (Express or NestJS are mentioned as options) or Python (FastAPI is mentioned as an option)
Database: PostgreSQL
Authentication: While Azure AD B2C or Firebase Auth are mentioned, for an MVP, a simpler built-in email/password authentication system within the chosen backend framework might be more rapid to implement initially. If Azure AD B2C or Firebase is straightforward, that's also acceptable.
Cloud Services (if MT feature is included): Azure Translator API
Focus for MVP
The absolute priority for this MVP is to achieve a functional end-to-end workflow for Korean to English translation. This includes:

Uploading Korean content.
Translating the content in the bilingual editor with the help of basic TM and glossary lookups.
Exporting the resulting English translation.
Basic user roles and status tracking to manage the process.
Features explicitly OUT OF SCOPE for this MVP include:

Translation into languages other than English.
Advanced collaborative features (e.g., real-time co-editing beyond simple save, complex commenting, task assignment beyond implicit role-based access).
The full AI training workflow for custom models.
Live interpretation support.
Complex filtering on the dashboard.
Support for other export formats like PDF, SRT, or CMS integration.
Please ensure the codebase is well-organized. Inform me if any of these requirements are unclear or need further simplification for an MVP context.